// Generated by view binder compiler. Do not edit!
package com.example.hotspot.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.hotspot.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTraerJuegosBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button botonComenzarPartida;

  @NonNull
  public final TextView claveRed;

  @NonNull
  public final LinearLayout llBotonera;

  @NonNull
  public final TextView nombreRed;

  @NonNull
  public final TextView textoCargando;

  private ActivityTraerJuegosBinding(@NonNull LinearLayout rootView,
      @NonNull Button botonComenzarPartida, @NonNull TextView claveRed,
      @NonNull LinearLayout llBotonera, @NonNull TextView nombreRed,
      @NonNull TextView textoCargando) {
    this.rootView = rootView;
    this.botonComenzarPartida = botonComenzarPartida;
    this.claveRed = claveRed;
    this.llBotonera = llBotonera;
    this.nombreRed = nombreRed;
    this.textoCargando = textoCargando;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTraerJuegosBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTraerJuegosBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_traer_juegos, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTraerJuegosBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.botonComenzarPartida;
      Button botonComenzarPartida = rootView.findViewById(id);
      if (botonComenzarPartida == null) {
        break missingId;
      }

      id = R.id.claveRed;
      TextView claveRed = rootView.findViewById(id);
      if (claveRed == null) {
        break missingId;
      }

      id = R.id.llBotonera;
      LinearLayout llBotonera = rootView.findViewById(id);
      if (llBotonera == null) {
        break missingId;
      }

      id = R.id.nombreRed;
      TextView nombreRed = rootView.findViewById(id);
      if (nombreRed == null) {
        break missingId;
      }

      id = R.id.textoCargando;
      TextView textoCargando = rootView.findViewById(id);
      if (textoCargando == null) {
        break missingId;
      }

      return new ActivityTraerJuegosBinding((LinearLayout) rootView, botonComenzarPartida, claveRed,
          llBotonera, nombreRed, textoCargando);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
